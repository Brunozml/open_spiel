
#imports
from typing import Callable, Optional, Protocol, Union
import pandas as pd
import pickle
from absl import app
from absl import flags
from absl import logging

import open_spiel.python.games
from open_spiel.python import rl_environment
from open_spiel.python.algorithms import cfr
from open_spiel.python.algorithms import mmd_dilated
from open_spiel.python.algorithms import exploitability
import pyspiel

FLAGS = flags.FLAGS

# flags 
flags.DEFINE_string("game", "python_block_dominoes", "Name of the game.")
flags.DEFINE_integer("num_train_episodes", 40_000,
                     "Number of training episodes.")
flags.DEFINE_integer("eval_every", 200,
                     "Episode frequency at which the agents are evaluated.")
flags.DEFINE_integer("save_every", 1000,
                     "Episode frequency at which the agents are saved.")
flags.DEFINE_string("checkpoint_dir", "open_spiel/python/examples/saved_examples/tiny_block_dominoes/agents/", 
                    "Directory to save/load the agent models.")
flags.DEFINE_string("results_dir", "open_spiel/python/examples/saved_examples/tiny_block_dominoes/results/", 
                    "Directory to save the data.")



# hyperparameters

# main loop
def main(unused_argv):
  game_name = FLAGS.game
  game = pyspiel.load_game(game_name)
  learner = cfr.CFRPlusSolver(game)
  df = pd.DataFrame({})
  # train                                 
  for ep in range(FLAGS.num_train_episodes):
      learner.evaluate_and_update_policy()
      if (ep + 1) % FLAGS.eval_every == 0:
          expl = exploitability.exploitability(game, learner.average_policy())
          # save exploitability in csv
          df = pd.concat([df, pd.DataFrame(log_info(ep, expl))], ignore_index=True)
          df.to_csv(FLAGS.results_dir + f"cfrplus_{game_name}.csv")


# auxiliary functions

# plot it and save it
def log_info(ep, expl) -> dict[str, list[Union[float, str]]]:
  logging.info("[%s] Exploitability AVG %s", ep + 1, expl)
  return {
    "Iteration": [ep+1],
    "Exploitability": [expl]
  }
  

# run the main loop
if __name__ == "__main__":
    app.run(main)
